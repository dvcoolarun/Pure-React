{"ast":null,"code":"var _jsxFileName = \"/home/arun/arun-backup-data/pure-react/react-hello/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Fragment } from 'react'; // function HelloWorld() {\n//     return (\n// \t<div>Hello World!</div>\n//     );\n// }\n// ReactDOM.render(\n// \t<HelloWorld/>,\t\t\n// \tdocument.querySelector('#root'));\n// function Hello() {\n//     return <span>Hello!</span>\n// }\n// Here is the JavaScript generated by the compiler:\n// function Hello() {\n//     return React.createElement(\n// \t'span',\n// \t{},\n// \t'Hello!'\n//     )\n// }\n// The React.createElement function signature looks like this:\n// React.createElement(\n//     string|element,\n//     [propsObject],\n//     [children...]\n// )\n// Each JSX element becomes a function call, where its arguments are its arguments (\"props\")a dnd its content (\"children\")\n// the propsObjecct and children are optional, and you can also supply more than one child by passing additional arguments.\n// function HelloWorld() {\n//     return React.createElement(\n// \t'div',\n// \t{},\n// \t'Hello',\n// \t'World'\n//     );\n// }\n// // You can also nest the calls:\n// function ManyChildren() {\n//     return React.createElement('div', {},\n//       React.createElement('div', {}, 'child1'),\n//       React.createElement('div', {}, 'child2',\n//         React.createElement('div', {}, 'child2_child')\n//       )\n//     );\n// }\n// function HelloWorld() {\n//     return React.createElement(\n// \t'div',\n// \t{},\n// \t'Hello World!'\n//     )\n// }\n// You can see that it references a function parameter named props.\n// But this is the way you pass arguments to React components.\n\nfunction SongName(props) {\n  return React.createElement(\"span\", {\n    className: \"song-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, props.song.name);\n} // What it compiles to:\n// function SongName(props) {\n//     return (\n// \tReact.createElement('span',\n// \t  { className: 'song-name' },\n// \t  props.song.name\n// \t)\n//     );\n// }\n\n\nfunction Hello() {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Hello\");\n}\n\nfunction World() {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"World\");\n} // A component function must return a single element.(or either array)\n\n\nfunction HelloWorld() {\n  //    return [<Hello/>, <World/>];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Hello, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), \" \", React.createElement(World, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), \"!\");\n} // It will render like this\n// <div>\n//   <span>Hello</span>\n//   <span>World</span>\n// </div>\n// Most of the the time, this doesn't give problems\n// But sometimes you want to have a wrapper element,\n// like if you have a component that returns two table cells.\n\n/* Now you can't wrap table cells elements into, <div>,\n   You can still wrap them in the <tr>\n   Imagine if you've got multiple components and each\n   is returning its own cells? How would you combine them (Fragments) */\n// function NameCells() {\n//     return (\n// \t    <td>First Name</td>\n// \t    <td>Last Name</td>\n//     )\n// }\n\n\nReactDOM.render(React.createElement(HelloWorld, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 137\n  },\n  __self: this\n}), document.querySelector('#root'));\n/* After rendering the React.Fragment componet will *diseapear*\n   leaving only the children inside it, so that DOM structure\n   will have no wrapper components.\n*/\n// function NameCells(){\n//     return (\n// \t    <React.fragments>\n// \t      <td>First Name</td>\n// \t      <td>Last Name</td>\n// \t    </React.fragments>\n//     );\n// }\n// Shorter Syntax for React.Fragment\n// With the babel7 and create-react-app v2\n\nfunction NameCells() {\n  return React.createElement(React.Fragment, null, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"First Name\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Last Name\"));\n}\n/* You can insert real javascript expressions within JSX code */\n\n\nfunction SubmitButton() {\n  var buttonLabel = \"Submit\";\n  return React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, buttonLabel);\n}","map":{"version":3,"sources":["/home/arun/arun-backup-data/pure-react/react-hello/src/index.js"],"names":["React","ReactDOM","Fragment","SongName","props","song","name","Hello","World","HelloWorld","render","document","querySelector","NameCells","SubmitButton","buttonLabel"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,QAAR,QAAwB,OAAxB,C,CACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,SACH;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACC,IAAN,CAAWC,IADhB,CADG;AAKH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,KAAT,GAAiB;AACb,SACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADG;AAGH;;AAED,SAASC,KAAT,GAAiB;AACb,SACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADG;AAGH,C,CAED;;;AAEA,SAASC,UAAT,GAAsB;AAElB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJ,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADI,OACK,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,MADF;AAKH,C,CAED;AACI;AACA;AACA;AACA;AAGJ;AACA;AACA;;AAEA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,QAAQ,CAACS,MAAT,CACC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAEIC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFJ;AAIA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,SAASC,SAAT,GAAqB;AACjB,SACC,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADD;AAMH;AAED;;;AACA,SAASC,YAAT,GAAwB;AACpB,MAAIC,WAAW,GAAG,QAAlB;AACA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASA,WAAT,CADD;AAGH","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Fragment } from 'react';\n// function HelloWorld() {\n//     return (\n// \t<div>Hello World!</div>\n//     );\n// }\n\n// ReactDOM.render(\n// \t<HelloWorld/>,\t\t\n// \tdocument.querySelector('#root'));\n\n\n// function Hello() {\n//     return <span>Hello!</span>\n// }\n\n// Here is the JavaScript generated by the compiler:\n\n// function Hello() {\n//     return React.createElement(\n// \t'span',\n// \t{},\n// \t'Hello!'\n//     )\n// }\n\n// The React.createElement function signature looks like this:\n// React.createElement(\n//     string|element,\n//     [propsObject],\n//     [children...]\n// )\n\n// Each JSX element becomes a function call, where its arguments are its arguments (\"props\")a dnd its content (\"children\")\n// the propsObjecct and children are optional, and you can also supply more than one child by passing additional arguments.\n\n// function HelloWorld() {\n//     return React.createElement(\n// \t'div',\n// \t{},\n// \t'Hello',\n// \t'World'\n//     );\n// }\n\n// // You can also nest the calls:\n// function ManyChildren() {\n//     return React.createElement('div', {},\n//       React.createElement('div', {}, 'child1'),\n//       React.createElement('div', {}, 'child2',\n//         React.createElement('div', {}, 'child2_child')\n//       )\n//     );\n// }\n\n// function HelloWorld() {\n//     return React.createElement(\n// \t'div',\n// \t{},\n// \t'Hello World!'\n//     )\n// }\n\n// You can see that it references a function parameter named props.\n// But this is the way you pass arguments to React components.\n\nfunction SongName(props) {\n    return (\n\t<span className='song-name'>\n\t    {props.song.name}\n\t</span>\n    );\n}\n\n// What it compiles to:\n// function SongName(props) {\n//     return (\n// \tReact.createElement('span',\n// \t  { className: 'song-name' },\n// \t  props.song.name\n// \t)\n//     );\n// }\n\n\nfunction Hello() {\n    return (\n\t<span>Hello</span>\n    )\n}\n\nfunction World() {\n    return (\n\t<span>World</span>\n    )\n}\n\n// A component function must return a single element.(or either array)\n\nfunction HelloWorld() {\n\n    //    return [<Hello/>, <World/>];\n\n    return (\n      <div>\n\t <Hello/> <World/>!\n      </div>\n    )\n}\n\n// It will render like this\n    // <div>\n    //   <span>Hello</span>\n    //   <span>World</span>\n    // </div>\n\n\n// Most of the the time, this doesn't give problems\n// But sometimes you want to have a wrapper element,\n// like if you have a component that returns two table cells.\n\n/* Now you can't wrap table cells elements into, <div>,\n   You can still wrap them in the <tr>\n   Imagine if you've got multiple components and each\n   is returning its own cells? How would you combine them (Fragments) */\n\n// function NameCells() {\n//     return (\n// \t    <td>First Name</td>\n// \t    <td>Last Name</td>\n//     )\n// }\n\nReactDOM.render(\n\t<HelloWorld/>,\t\t\n    document.querySelector('#root'));\n\n/* After rendering the React.Fragment componet will *diseapear*\n   leaving only the children inside it, so that DOM structure\n   will have no wrapper components.\n*/\n\n// function NameCells(){\n//     return (\n// \t    <React.fragments>\n// \t      <td>First Name</td>\n// \t      <td>Last Name</td>\n// \t    </React.fragments>\n//     );\n// }\n\n// Shorter Syntax for React.Fragment\n\n// With the babel7 and create-react-app v2\n\nfunction NameCells() {\n    return (\n\t    <>\n\t      <td>First Name</td>\n\t      <td>Last Name</td>\n\t    </>\n    );\n}\n\n/* You can insert real javascript expressions within JSX code */\nfunction SubmitButton() {\n    var buttonLabel = \"Submit\";\n    return (\n\t    <button>{buttonLabel}</button>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}