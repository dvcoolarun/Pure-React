import React from 'react';
import ReactDOM from 'react-dom';
import {Fragment } from 'react';

function HelloWorld() {
    return (
	<div>Hello World!</div>
    );
}

ReactDOM.render(
	<HelloWorld/>,		
	document.querySelector('#root'));


function Hello() {
    return <span>Hello!</span>
}

/* Here is the JavaScript generated by the compiler: */

function Hello() {
    return React.createElement(
	'span',
	{},
	'Hello!'
    )
}

/* The React.createElement function signature looks like this:*/
React.createElement(
    string|element,
    [propsObject],
    [children...]
)

/* Each JSX element becomes a function call, where its arguments are its arguments ("props")a dnd its content ("children") */

// the propsObjecct and children are optional, and you can also supply more than one child by passing additional arguments.

function HelloWorld() {
    return React.createElement(
	'div',
	{},
	'Hello',
	'World'
    );
}

// You can also nest the calls:
function ManyChildren() {
    return React.createElement('div', {},
      React.createElement('div', {}, 'child1'),
      React.createElement('div', {}, 'child2',
        React.createElement('div', {}, 'child2_child')
      )
    );
}

function HelloWorld() {
    return React.createElement(
	'div',
	{},
	'Hello World!'
    )
}

// You can see that it references a function parameter named props.
// But this is the way you pass arguments to React components.

function SongName(props) {
    return (
	<span className='song-name'>
	    {props.song.name}
	</span>
    );
}

// What it compiles to:
function SongName(props) {
    return (
	React.createElement('span',
	  { className: 'song-name' },
	  props.song.name
	)
    );
}


function Hello() {
    return (
	<span>Hello</span>
    )
}

function World() {
    return (
	<span>World</span>
    )
}

// A component function must return a single element.(or either array)

function HelloWorld() {

    //    return [<Hello/>, <World/>];

    return (
      <div>
	 <Hello/> <World/>!n
      </div>
    )
}

// It will render like this
    // <div>
    //   <span>Hello</span>
    //   <span>World</span>
    // </div>


// Most of the the time, this doesn't give problems
// But sometimes you want to have a wrapper element,
// like if you have a component that returns two table cells.

/* Now you can't wrap table cells elements into, <div>,
   You can still wrap them in the <tr>
   Imagine if you've got multiple components and each
   is returning its own cells? How would you combine them (Fragments) */

// function NameCells() {
//     return (
// 	    <td>First Name</td>
// 	    <td>Last Name</td>
//     )
// }

ReactDOM.render(
	<HelloWorld/>,		
    document.querySelector('#root'));

/* After rendering the React.Fragment componet will *diseapear*
   leaving only the children inside it, so that DOM structure
   will have no wrapper components.
*/

function NameCells(){
    return (
	    <React.fragments>
	      <td>First Name</td>
	      <td>Last Name</td>
	    </React.fragments>
    );
}

// Shorter Syntax for React.Fragment

// With the babel7 and create-react-app v2

function NameCells() {
    return (
	    <>
	      <td>First Name</td>
	      <td>Last Name</td>
	    </>
    );
}

/* You can insert real javascript expressions within JSX code */
function SubmitButton() {
    var buttonLabel = "Submit";
    return (
	    <button>{buttonLabel}</button>
    );
}

/* Remember that this will compiled to javascript, 
   which means JS inside the braces must be an expression
   An expression produce value.
   

   1 * 2
   buttonLabel
   aFunctionCall()
   aFunctionName
*/

/* 
   Each of these produces(aka returns) a single value.
   In the contrast statements do not produce values
   
   Statements doesn't produce values, so can't be
   used inside JSX.
*/

// var a = 5

// if(true) { 17; }

// while(i < 7) { i++ }

/* 

Another way to think of statement vs expression is that expressions
can be on the right hand of assignment, but statements cannot.

*/

// These aren't valid JS:
// Statements are *stating something,
// You can't put them on the right-hand Side.

// a = var b = 5:
// a = if(true) { 17; }

// These are not valid Javascript.


/* Question you might wonder, if we can't write "if" statements
   
   * The first is the ternary operator (the question 

*/

function ValidIndicator() {
    var isValid = true;
    return (
      <span>{isValid? 'valid': 'not valid'}</span>
    );
}


function ValidIndicator() {
    var isValid = true;
    return (
      <span>
	{isValid && 'valid'}
	{!isValid && 'not valid'}
      </span>
    );
}

/* Comments in JSX */

function ValidIndicator () {
    var isValid = true;
    return (
      <span>
	{/% here is the comment %/}
	{isValid && 'valid'}
	{!isValid && 'not valid'}

	{
	    // Double-slash comments are
	    // OK in multi-line blocks
	}

	{/*
	  <span>Thing One</span>
	  <span>Thing Two</span>
	*/}
      </span>
    );
}

/* The components you write must begin 
   With an uppercase Letter, This means
   using names like UserList and Menu
   and SubmitButton.

   Not submit_button
   
   components that starts with lowercase assume to 
   be built-in HTML or SVG element.
 */


/*
  Close Every Element
  JSX requires every element to be closed, 
  This include elements you might be living open (<input>, <br>, <li>)
*/

// DO THIS:
// return <br/>;
// return <input type='password' .../>
// return <li>text</li>

// NOT THIS:
// return <br>;
// return <input type='password' .../>;
// return <li>text;
