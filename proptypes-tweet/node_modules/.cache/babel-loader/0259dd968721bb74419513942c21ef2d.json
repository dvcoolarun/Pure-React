{"ast":null,"code":"var _jsxFileName = \"/home/arun/arun-backup-data/pure-react/proptypes-tweet/src/index.js\";\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/* Adding PropType to Tweet */\n\nfunction Tweet({\n  tweet\n}) {\n  return React.createElement(\"div\", {\n    className: \"tweet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    hash: tweet.gravatar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(NameWithHandle, {\n    author: tweet.author,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(Time, {\n    time: tweet.timestamp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(Message, {\n    text: tweet.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(ReplyButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(RetweetButton, {\n    count: tweet.retweets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(LikeButton, {\n    count: tweet.likes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(MoreOptionsButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }))));\n}\n\nTweet.propTypes = {\n  Tweet: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n    gravatar: PropTypes.string.isRequired,\n    author: PropTypes.shape({\n      handle: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    }),\n    likes: PropTypes.number,\n    retweets: PropTypes.number,\n    timestamp: PropTypes.string.isRequired\n  })\n};\n\nfunction Avatar({\n  hash\n}) {\n  var url = 'https://www.gravatar.com/avatar/${hash}';\n  return React.createElement(\"img\", {\n    src: url,\n    className: \"avatar\",\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n}\n\nAvatar.propTypes = {\n  hash: PropTypes.string.isRequired\n};\n/* NameWithHandle is little more interesting,\n   It takes an author object that should have\n   name and handle properties. */\n\nfunction NameWithHandle({\n  author\n}) {\n  const name = author.name,\n        handle = author.handle;\n  return React.createElement(\"span\", {\n    className: \"name-with-handle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, 20), React.createElement(\"span\", {\n    className: \"handle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"@\", handle));\n}\n/* Here we used shape because, we need to have two properties\n  which are required, in a object (author).*/\n\n\nNameWithHandle.propTypes = {\n  author: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    handle: PropTypes.string.isRequired\n  }).isRequired\n};\n\nfunction Message({\n  text\n}) {\n  return React.createElement(\"div\", {\n    className: \"message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, text);\n}\n\nMessage.propTypes = {\n  count: PropTypes.string\n};\n\nconst Time = ({\n  time\n}) => {\n  const timeString = moment(time).fromNow();\n  return React.createElement(\"span\", {\n    className: \"time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, timeString);\n};\n\nTime.propTypes = {\n  count: PropTypes.string\n};\n\nconst ReplyButton = () => React.createElement(\"i\", {\n  className: \"fa fa-reply reply-button\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n});\n\nfunction Count({\n  count\n}) {\n  if (count > 0) {\n    return React.createElement(\"span\", {\n      className: \"retweet-count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, count);\n  } else {\n    return null;\n  }\n}\n\n;\n\nconst RetweetButton = ({\n  count\n}) => React.createElement(\"span\", {\n  className: \"retweet-button\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 123\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  className: \"fa fa-retweet\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 124\n  },\n  __self: this\n}), React.createElement(Count, {\n  count: count,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 125\n  },\n  __self: this\n}));\n\nRetweetButton.propTypes = {\n  count: PropTypes.number\n};\n\nconst LikeButton = ({\n  count\n}) => React.createElement(\"span\", {\n  className: \"like-button\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 134\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  className: \"fa fa-heart\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  className: \"like-count\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 136\n  },\n  __self: this\n}, count ? count : null));\n\nLikeButton.propTypes = {\n  count: PropTypes.number\n};\n\nconst MoreOptionsButton = () => React.createElement(\"i\", {\n  className: \"fa fa-ellipsis-h more-options-buttons\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147\n  },\n  __self: this\n}); // ...\n\n\nvar testTweet = {\n  message: \"Something about cats.\",\n  gravatar: \"xyz\",\n  author: {\n    handle: \"catperson\",\n    name: \"IAMA Cat Person\"\n  },\n  likes: 2,\n  retweets: 2,\n  timestamp: \"2019-7-1 11:24:37\"\n};\nReactDOM.render(React.createElement(Tweet, {\n  tweet: testTweet,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 163\n  },\n  __self: this\n}), document.querySelector('#root'));\n/* Working on the PropTypes */\n\nfunction Comment({\n  author,\n  message,\n  likes\n}) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"author\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, author), React.createElement(\"div\", {\n    className: \"message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, message), React.createElement(\"div\", {\n    className: \"likes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, likes > 0 ? likes : 'No', \" likes\"));\n}\n\nComment.propTypes = {\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  likes: PropTypes.number\n}; // ReactDOM.render(<Comment author={42}/>,\n//     document.querySelector('#root')\n// );\n\n/* Working with Custom Validators */\n\nfunction CustomValidator(props, propName, componentName) {\n  // here propName === \"myCustomProp\"\n  if (props[propName].length !== 3) {\n    return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Length is not 3.');\n  }\n}\n\n;\n\nconst CustomTest = ({\n  myCustomProp\n}) => React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 204\n  },\n  __self: this\n}, myCustomProp);\n\nCustomTest.propTypes = {\n  myCustomProp: CustomValidator\n}; // ReactDOM.render(\n//     <CustomTest myCustomProp='not_abc'/>,\n//     document.getElementById('root')\n// );","map":{"version":3,"sources":["/home/arun/arun-backup-data/pure-react/proptypes-tweet/src/index.js"],"names":["moment","PropTypes","React","ReactDOM","Tweet","tweet","gravatar","author","timestamp","message","retweets","likes","propTypes","shape","string","isRequired","handle","name","number","Avatar","hash","url","NameWithHandle","Message","text","count","Time","time","timeString","fromNow","ReplyButton","Count","RetweetButton","LikeButton","MoreOptionsButton","testTweet","render","document","querySelector","Comment","CustomValidator","props","propName","componentName","length","Error","CustomTest","myCustomProp"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AAEA;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA0B;AACtB,SACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEA,KAAK,CAACC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAED,KAAK,CAACE,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EACyC,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEF,KAAK,CAACG,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADzC,EAEI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEH,KAAK,CAACI,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEK,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEJ,KAAK,CAACK,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,EAGK,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEL,KAAK,CAACM,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHL,EAII,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAHJ,CAFJ,CADJ;AAeH;;AAEDP,KAAK,CAACQ,SAAN,GAAkB;AACdR,EAAAA,KAAK,EAAGH,SAAS,CAACY,KAAV,CAAgB;AACpBJ,IAAAA,OAAO,EAAER,SAAS,CAACa,MAAV,CAAiBC,UADN;AAEpBT,IAAAA,QAAQ,EAAEL,SAAS,CAACa,MAAV,CAAiBC,UAFP;AAGpBR,IAAAA,MAAM,EAAEN,SAAS,CAACY,KAAV,CAAgB;AACpBG,MAAAA,MAAM,EAAEf,SAAS,CAACa,MAAV,CAAiBC,UADL;AAEpBE,MAAAA,IAAI,EAAEhB,SAAS,CAACa,MAAV,CAAiBC;AAFH,KAAhB,CAHY;AAOpBJ,IAAAA,KAAK,EAAEV,SAAS,CAACiB,MAPG;AAQpBR,IAAAA,QAAQ,EAAET,SAAS,CAACiB,MARA;AASpBV,IAAAA,SAAS,EAAEP,SAAS,CAACa,MAAV,CAAiBC;AATR,GAAhB;AADM,CAAlB;;AAeA,SAASI,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA0B;AACtB,MAAIC,GAAG,GAAG,yCAAV;AACA,SACI;AACI,IAAA,GAAG,EAAEA,GADT;AAEI,IAAA,SAAS,EAAC,QAFd;AAGI,IAAA,GAAG,EAAC,QAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH;;AAEDF,MAAM,CAACP,SAAP,GAAmB;AACfQ,EAAAA,IAAI,EAAGnB,SAAS,CAACa,MAAV,CAAiBC;AADT,CAAnB;AAIA;;;;AAIA,SAASO,cAAT,CAAwB;AAAEf,EAAAA;AAAF,CAAxB,EAAoC;AAAA,QACxBU,IADwB,GACPV,MADO,CACxBU,IADwB;AAAA,QAClBD,MADkB,GACPT,MADO,CAClBS,MADkB;AAEhC,SACI;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwB,EAAxB,CADF,EAEE;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA2BA,MAA3B,CAFF,CADJ;AAMH;AAED;;;;AAGAM,cAAc,CAACV,SAAf,GAA2B;AACvBL,EAAAA,MAAM,EAAEN,SAAS,CAACY,KAAV,CAAgB;AACpBI,IAAAA,IAAI,EAAEhB,SAAS,CAACa,MAAV,CAAiBC,UADH;AAEpBC,IAAAA,MAAM,EAAEf,SAAS,CAACa,MAAV,CAAiBC;AAFL,GAAhB,EAGLA;AAJoB,CAA3B;;AAOA,SAASQ,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA2B;AACvB,SACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADJ;AAKH;;AAEDD,OAAO,CAACX,SAAR,GAAoB;AAChBa,EAAAA,KAAK,EAAExB,SAAS,CAACa;AADD,CAApB;;AAIA,MAAMY,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACvB,QAAMC,UAAU,GAAG5B,MAAM,CAAC2B,IAAD,CAAN,CAAaE,OAAb,EAAnB;AAEA,SACI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,UADH,CADJ;AAKH,CARD;;AAUAF,IAAI,CAACd,SAAL,GAAiB;AACba,EAAAA,KAAK,EAAExB,SAAS,CAACa;AADJ,CAAjB;;AAIA,MAAMgB,WAAW,GAAG,MAChB;AAAG,EAAA,SAAS,EAAC,0BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ;;AAIA,SAASC,KAAT,CAAe;AAAEN,EAAAA;AAAF,CAAf,EAA0B;AACtB,MAAGA,KAAK,GAAG,CAAX,EAAc;AACV,WACI;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KADH,CADJ;AAKH,GAND,MAMO;AACH,WAAO,IAAP;AACH;AACJ;;AAAA;;AAED,MAAMO,aAAa,GAAG,CAAC;AAAEP,EAAAA;AAAF,CAAD,KAClB;AAAM,EAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAG,EAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADJ;;AAOAO,aAAa,CAACpB,SAAd,GAA0B;AACtBa,EAAAA,KAAK,EAAExB,SAAS,CAACiB;AADK,CAA1B;;AAIA,MAAMe,UAAU,GAAG,CAAC;AAAER,EAAAA;AAAF,CAAD,KACf;AAAM,EAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAG,EAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE;AAAM,EAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGA,KAAK,GAAGA,KAAH,GAAW,IADnB,CAFF,CADJ;;AASAQ,UAAU,CAACrB,SAAX,GAAuB;AACnBa,EAAAA,KAAK,EAAExB,SAAS,CAACiB;AADE,CAAvB;;AAIA,MAAMgB,iBAAiB,GAAG,MACtB;AAAG,EAAA,SAAS,EAAC,uCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,C,CAIA;;;AACA,IAAIC,SAAS,GAAG;AACZ1B,EAAAA,OAAO,EAAE,uBADG;AAEZH,EAAAA,QAAQ,EAAE,KAFE;AAGZC,EAAAA,MAAM,EAAE;AACJS,IAAAA,MAAM,EAAE,WADJ;AAEJC,IAAAA,IAAI,EAAE;AAFF,GAHI;AAOZN,EAAAA,KAAK,EAAE,CAPK;AAQZD,EAAAA,QAAQ,EAAE,CARE;AASZF,EAAAA,SAAS,EAAE;AATC,CAAhB;AAYAL,QAAQ,CAACiC,MAAT,CAAgB,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAED,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EACIE,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CADJ;AAIA;;AACA,SAASC,OAAT,CAAiB;AAAEhC,EAAAA,MAAF;AAAUE,EAAAA,OAAV;AAAmBE,EAAAA;AAAnB,CAAjB,EAA4C;AACxC,SACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BJ,MAA1B,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BE,OAA3B,CAFF,EAGE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAmB,IADtB,WAHF,CADG;AASH;;AAED4B,OAAO,CAAC3B,SAAR,GAAoB;AAChBH,EAAAA,OAAO,EAAER,SAAS,CAACa,MAAV,CAAiBC,UADV;AAEhBR,EAAAA,MAAM,EAAEN,SAAS,CAACa,MAAV,CAAiBC,UAFT;AAGhBJ,EAAAA,KAAK,EAAEV,SAAS,CAACiB;AAHD,CAApB,C,CAMA;AACA;AACA;;AAEA;;AAEA,SAASsB,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,aAA1C,EAAyD;AACrD;AACA,MAAIF,KAAK,CAACC,QAAD,CAAL,CAAgBE,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAO,IAAIC,KAAJ,CACH,mBAAmBH,QAAnB,GAA8B,eAA9B,GACI,IADJ,GACWC,aADX,GAC2B,qBAFxB,CAAP;AAIH;AAEJ;;AAAA;;AAED,MAAMG,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOA,YAAP,CADJ;;AAIAD,UAAU,CAAClC,SAAX,GAAuB;AACnBmC,EAAAA,YAAY,EAAEP;AADK,CAAvB,C,CAIA;AACA;AACA;AACA","sourcesContent":["import moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/* Adding PropType to Tweet */\n\nfunction Tweet({ tweet }) {\n    return (\n        <div className=\"tweet\">\n          <Avatar hash={tweet.gravatar}/>\n            <div className=\"content\">\n              <NameWithHandle author={tweet.author}/><Time time={tweet.timestamp}/>\n                <Message text={tweet.message}/>\n                <div className=\"buttons\">\n                    <ReplyButton/>\n                     <RetweetButton count={tweet.retweets}/>\n                     <LikeButton count={tweet.likes}/>\n                    <MoreOptionsButton/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nTweet.propTypes = {\n    Tweet : PropTypes.shape({\n        message: PropTypes.string.isRequired,\n        gravatar: PropTypes.string.isRequired,\n        author: PropTypes.shape({\n            handle: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n        }),\n        likes: PropTypes.number,\n        retweets: PropTypes.number,\n        timestamp: PropTypes.string.isRequired\n    })\n};\n\n\nfunction Avatar({ hash }) {\n    var url = 'https://www.gravatar.com/avatar/${hash}';\n    return (\n        <img \n            src={url}\n            className=\"avatar\"\n            alt=\"avatar\"/>\n    );\n}\n\nAvatar.propTypes = {\n    hash : PropTypes.string.isRequired\n};\n\n/* NameWithHandle is little more interesting,\n   It takes an author object that should have\n   name and handle properties. */\n\nfunction NameWithHandle({ author }) {\n    const { name, handle } = author;\n    return (\n        <span className=\"name-with-handle\">\n          <span className=\"name\">{20}</span>\n          <span className=\"handle\">@{handle}</span>\n        </span>\n    );\n}\n\n/* Here we used shape because, we need to have two properties\n  which are required, in a object (author).*/\n\nNameWithHandle.propTypes = {\n    author: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        handle: PropTypes.string.isRequired\n    }).isRequired\n};\n\nfunction Message({ text }) {\n    return (\n        <div className=\"message\">\n          {text}\n        </div>\n    );\n}\n\nMessage.propTypes = {\n    count: PropTypes.string\n};\n\nconst Time = ({ time }) => {\n    const timeString = moment(time).fromNow();\n\n    return(\n        <span className=\"time\">\n          {timeString}\n        </span>\n    );\n};\n\nTime.propTypes = {\n    count: PropTypes.string\n};\n\nconst ReplyButton = () => (\n    <i className=\"fa fa-reply reply-button\"></i>\n);\n\nfunction Count({ count }) {\n    if(count > 0) {\n        return (\n            <span className=\"retweet-count\">\n              {count}\n            </span>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst RetweetButton = ({ count }) => (\n    <span className=\"retweet-button\">\n      <i className=\"fa fa-retweet\"/>\n      <Count count={count}/>\n    </span>\n);\n\nRetweetButton.propTypes = {\n    count: PropTypes.number\n};\n\nconst LikeButton = ({ count }) => (\n    <span className=\"like-button\">\n      <i className=\"fa fa-heart\"/>\n      <span className=\"like-count\">\n        {count ? count : null}\n      </span>\n    </span>\n);\n\nLikeButton.propTypes = {\n    count: PropTypes.number\n};\n\nconst MoreOptionsButton = () => (\n    <i className=\"fa fa-ellipsis-h more-options-buttons\"/>\n);\n\n// ...\nvar testTweet = {\n    message: \"Something about cats.\",\n    gravatar: \"xyz\",\n    author: {\n        handle: \"catperson\",\n        name: \"IAMA Cat Person\"\n    },\n    likes: 2,\n    retweets: 2,\n    timestamp: \"2019-7-1 11:24:37\"\n};\n\nReactDOM.render(<Tweet tweet={testTweet}/>, \n    document.querySelector('#root'));\n\n\n/* Working on the PropTypes */\nfunction Comment({ author, message, likes}) {\n    return (\n\t<div>\n\t  <div className='author'>{ author }</div>\n\t  <div className='message'>{ message }</div>\n\t  <div className='likes'>\n\t    {likes > 0 ? likes: 'No'} likes\n\t  </div>\n\t</div>\n    );\n}\n\nComment.propTypes = {\n    message: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    likes: PropTypes.number\n};\n\n// ReactDOM.render(<Comment author={42}/>,\n//     document.querySelector('#root')\n// );\n\n/* Working with Custom Validators */\n\nfunction CustomValidator(props, propName, componentName) {\n    // here propName === \"myCustomProp\"\n    if (props[propName].length !== 3) {\n        return new Error(\n            'Invalid prop `' + propName + '` supplied to' +\n                ' `' + componentName + '`. Length is not 3.' \n        );\n    }\n\n};\n\nconst CustomTest = ({ myCustomProp }) => (\n    <span>{myCustomProp}</span>\n);\n\nCustomTest.propTypes = {\n    myCustomProp: CustomValidator\n};\n\n// ReactDOM.render(\n//     <CustomTest myCustomProp='not_abc'/>,\n//     document.getElementById('root')\n// );\n"]},"metadata":{},"sourceType":"module"}